#!/usr/bin/perl

my $nbsp0 = chr(194);
my $nbsp1 = chr(140);
my $nbsp = "$nbsp0$nbsp1";

# Grab command line variables
my $inputfile = $ARGV[0];

# Sanity check
if (($inputfile ne "-") && (! -f $inputfile)) {
  print STDERR "Can't find '$inputfile'\n";
  exit 1;
}

my $DATA;
# Open the input file.
if ($inputfile eq "-") {
  $DATA = STDIN;
}
else {
  open $DATA, "<", "$inputfile";
}

my $maxTargets = 3;
my $maxThemes = 5;
my $maxLanguages = 8;

# Open the output file
open my $fh, '>', 'code-data1.tsv';

# Print the header
print $fh "Name\t";
for (my $i = 1; $i <= $maxTargets; $i++) {
  print $fh "Targ$i\t";
}
for (my $i = 1; $i <= $maxThemes; $i++) {
  print $fh "Theme$i\t";
}
for (my $i = 1; $i <= $maxLanguages; $i++) {
  print $fh "Lang$i\t";
}
print $fh "\n";

# Remove the header from the data
<$DATA>;

# Process all of the lines
while (my $line = <$DATA>) {
  chomp($line); # Remove the carriage return/newline
  $line =~ s/$nbsp/ /g; # Clean up non-breaking spaces
  my @columns = split("\t",$line);
  my $campName = $columns[2];
  my $targetCol = $columns[4];
  my $themeCol = $columns[5];
  my $languageCol = $columns[6];
  my @languageArr = ();
  my @themeArr = ();
  my @targetArr = ();
  my @targets = (
    "Women",               # 0
    "N/A",                 # 1
    "Ethnic Minorities",   # 2
    "Low Income",          # 3
    "Men",                 # 4
    "Christians",          # 5
  );
  my @themes = (
    "Art",                  # 0
    "Programming",          # 1
    "Game Design",          # 2 
    "App Dev",              # 3
    "Virtual Reality",      # 4
    "Web .*",
    "Robotics",
    "Minecraft",
    "Circuitry",
    "Other.*",
    "Overview",
  );
  my @languages = (
      "3D Printing",
      "AgentSheets",
    "Adobe",
    "Alice",
    "App Inventor",
    "Arduino",
    "Blender",
    "Blockly",
    "C",
    "C#",
    "C[+][+]",
    "CAD",
    "ClickTeam.*",
    "CSS",
    "Dash & Dot",
    "Flash",
    "GameMaker",
    "GameSalad",
    "HTML",
    "Java",
    "JavaScript",
    "LEGO",
    "Lua",
    "Maya",
    "Minecraft",
    "PHP",
    "Processing",
    "Python",
    "Scratch",
    "Snap",
    "Source 2",
    "Stencyl",
    "Unity",
    "Unreal Engine",
    "PicoCricket",
    "3D Studio",
    "Code Studio",
    "ComicLife",
    "Curiosity Grid",
    "Linden Scripting Language",
    "Spritely",
    "Jypeli",
    "Wing IDE",
    "Rhino",
    "Grasshopper",
    "Block Language",
    "Construct",
    "Kerbal Space Program",
    "Agent Sheets",
    "Teacher-Bot",
    "Kodable",
    "Kodu",
    "Lightbot",
    "Logo",
    "Matlab",
    "MicroWorlds",
    "Multimedia Fusion",
    "OWL Game Creator",
    "Quorum",
    "R",
    "RPG Maker",
    "Ruby On Rails",
    "Sketchup",
    "SQL",
    "Toon Boom Harmony",
    "TrackMania United",
    "Tynker",
    "VEX.*",
    "Virtual Basic",
    "West Point Bridge Designer",
    "Windows Movie Maker",
    "ZBrush",
      "Unknown",
      "Other",
  );
  # Gather data
  @targetArr = codeStuff($campName, "Target", $targetCol, \@targets);
  @themeArr = codeStuff($campName, "Theme", $themeCol, \@themes);
  @languageArr = codeStuff($campName, "Language", $languageCol, \@languages);

  # Dump the revised data
  print $fh "$campName\t";
  my $count;

  foreach my $v (@targetArr) {
    print $fh "$v\t";
  }
  $count = $maxTargets - 1 - $#targetArr;
  for (my $a=0; $a<=$count; $a++) {
    print $fh "@\t";
  }
  foreach my $v (@themeArr) {
    print $fh "$v\t";
  }
  $count = $maxThemees - 1 - $#themeArr;
  for ($a=0; $a<=$count; $a++) {
    print $fh "@\t";
  }
  foreach my $v (@languageArr) {
    print $fh "$v\t";
  }
  $count = $maxLanguages - 1 - $#languageArr;
  for (my $a=0; $a<=$count; $a++) {
    print $fh "@\t";
  }
  print $fh "\n";
} # while

# Clean up
close $fh;
close $DATA;

# codeStuff($campName, $entryType, $entry, @patterns)
#   Do the coding of entry using patterns.  Return the array of codes.
sub codeStuff($$@)
{
  my ($campName, $entryType, $entry, $patterns) = @_;
  my @patterns = @{$patterns};
  my @result = ();
  my $found = 0;
  for (my $i = 0; $i <= $#patterns; $i++) {
    my $pattern = $patterns[$i];
    if (($entry =~ /^$pattern,/i) || ($entry =~ /^$pattern$/i) ||
        ($entry =~ /[ ,]$pattern,/i) || ($entry =~ /[ ,]$pattern$/i) ||
        ($entry =~ /^$pattern /i) || ($entry =~ /[ ,]$pattern /))
    {
      push @result, $i;
      $found = 1;
    }
  } # for
  if (! $found) {
    print STDERR "[$campName]: Could not find a code for $entryType [$entry]\n";
  }
  return @result;
}

